import java_cup.runtime.*;

parser code  {: 
  public void report_error(String message, Object info) {
    StringBuffer m = new StringBuffer("Error ");

    if (info instanceof java_cup.runtime.Symbol) 
      m.append( "("+info.toString()+")" );
     
    m.append(" : "+message);
   
    System.out.println(m);
  }
   
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }
:};

terminal INT, LONG, DOUBLE, VOID, FLOAT, SHORT, VOLATILE, CHAR, CONST, STATIC, UNION, UNSIGNED, SIGNED, STRUCT, TYPEDEF;
terminal LPAREN, RPAREN, LBRACE, RBRACE, LBRACK, RBRACK, SEMICOLON, COMMA, DOT;
terminal ASSGN, LT, GT, PLUSPLUS, PLUS, MINUS, DIV, STAR;
terminal AUTO, ENUM, RESTRICT, EXTERN, SIZEOF, INLINE, REGISTER;
terminal BREAK, CASE, RETURN, GOTO, CONTINUE, DEFAULT;
terminal FOR, WHILE, IF, DO, SWITCH, ELSE;
terminal _BOOL, _COMPLEX, _IMAGINARY;
terminal MINUSMINUS, LINK, AND, TILDA, NOT, MOD, LSHIFT, RSHIFT, LE, GE, EQUALEQUAL, NOTEQUAL, ANDAND, LSHIFTEQUAL, ANDEQUAL;
terminal OROR, XOR, TERNARY, OR, COLON, VARARGS, STAREQUAL, DIVEQUAL, MODEQUAL, PLUSEQUAL, MINUSEQUAL, RSHIFTEQUAL, XOREQUAL, OREQUAL;
terminal java.lang.Number INTEGER_LITERAL;
terminal java.lang.Number FLOATING_POINT_LITERAL;
terminal java.lang.String IDENTIFIER; 
non terminal fake;
fake ::= INT;


